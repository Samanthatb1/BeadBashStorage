// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  account_id,
  username,
  full_name,
  purchase_amount,
  purchased_item,
  shipping_location,
  currency,
  date_ordered
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING order_id, account_id, username, full_name, purchase_amount, purchased_item, shipping_location, currency, date_ordered
`

type CreateOrderParams struct {
	AccountID        int64   `json:"account_id"`
	Username         string  `json:"username"`
	FullName         string  `json:"full_name"`
	PurchaseAmount   float64 `json:"purchase_amount"`
	PurchasedItem    string  `json:"purchased_item"`
	ShippingLocation string  `json:"shipping_location"`
	Currency         string  `json:"currency"`
	DateOrdered      string  `json:"date_ordered"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.AccountID,
		arg.Username,
		arg.FullName,
		arg.PurchaseAmount,
		arg.PurchasedItem,
		arg.ShippingLocation,
		arg.Currency,
		arg.DateOrdered,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.AccountID,
		&i.Username,
		&i.FullName,
		&i.PurchaseAmount,
		&i.PurchasedItem,
		&i.ShippingLocation,
		&i.Currency,
		&i.DateOrdered,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE order_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const getOrderById = `-- name: GetOrderById :one
SELECT order_id, account_id, username, full_name, purchase_amount, purchased_item, shipping_location, currency, date_ordered FROM orders
WHERE order_id = $1 LIMIT 1
`

func (q *Queries) GetOrderById(ctx context.Context, orderID int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.AccountID,
		&i.Username,
		&i.FullName,
		&i.PurchaseAmount,
		&i.PurchasedItem,
		&i.ShippingLocation,
		&i.Currency,
		&i.DateOrdered,
	)
	return i, err
}

const listAllOrders = `-- name: ListAllOrders :many
SELECT order_id, account_id, username, full_name, purchase_amount, purchased_item, shipping_location, currency, date_ordered FROM orders
ORDER BY order_id
LIMIT $1
OFFSET $2
`

type ListAllOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllOrders(ctx context.Context, arg ListAllOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listAllOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.AccountID,
			&i.Username,
			&i.FullName,
			&i.PurchaseAmount,
			&i.PurchasedItem,
			&i.ShippingLocation,
			&i.Currency,
			&i.DateOrdered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByUsername = `-- name: ListOrdersByUsername :many
SELECT order_id, account_id, username, full_name, purchase_amount, purchased_item, shipping_location, currency, date_ordered FROM orders
WHERE username = $1
`

func (q *Queries) ListOrdersByUsername(ctx context.Context, username string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.AccountID,
			&i.Username,
			&i.FullName,
			&i.PurchaseAmount,
			&i.PurchasedItem,
			&i.ShippingLocation,
			&i.Currency,
			&i.DateOrdered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET purchase_amount = $2,
purchased_item = $3,
shipping_location = $4
WHERE order_id = $1
RETURNING order_id, account_id, username, full_name, purchase_amount, purchased_item, shipping_location, currency, date_ordered
`

type UpdateOrderParams struct {
	OrderID          int64   `json:"order_id"`
	PurchaseAmount   float64 `json:"purchase_amount"`
	PurchasedItem    string  `json:"purchased_item"`
	ShippingLocation string  `json:"shipping_location"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.OrderID,
		arg.PurchaseAmount,
		arg.PurchasedItem,
		arg.ShippingLocation,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.AccountID,
		&i.Username,
		&i.FullName,
		&i.PurchaseAmount,
		&i.PurchasedItem,
		&i.ShippingLocation,
		&i.Currency,
		&i.DateOrdered,
	)
	return i, err
}
